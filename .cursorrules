# Cursor AI 项目管理规则配置

## 项目概述
这是一个AI驱动的项目开发流程管理系统，支持双模式（Developer Mode 和 Reviewer Mode）管理。

## 开发阶段流程
严格按照以下五个阶段进行开发：
1. BASIC_DESIGN（基本设计）
2. DETAIL_DESIGN（详细设计） 
3. DEVELOPMENT（开发实现）
4. UNIT_TEST（单元测试）
5. INTEGRATION_TEST（集成测试）

## 开发模式规则

### Developer Mode 要求
- 严格按照 `project_manager/prompts/developer_mode.md` 中的提示词模板
- 每个阶段必须生成对应的输出文件
- 代码必须遵循PEP 8规范
- 必须包含完整的错误处理
- 必须添加详细的注释和文档字符串

### Reviewer Mode 要求
- 严格按照 `project_manager/prompts/reviewer_mode.md` 中的评审标准
- 使用25分制评分系统
- 问题分级：CRITICAL > MAJOR > MINOR
- 每次评审只关注一个最重要的改进点

## 代码质量要求

### 设计阶段
- 必须包含业务流程图（mermaid格式）
- 必须包含系统架构图
- 必须包含ER图和表结构
- 必须包含API接口清单

### 开发阶段
- 功能完整性：35%
- 代码规范：25%
- 异常处理：20%
- 性能优化：20%

### 测试阶段
- 测试覆盖率：35%
- 边界测试：30%
- 异常测试：35%

## 文件结构要求
严格按照以下结构组织代码：
```
project_manager/
├── __init__.py
├── models.py              # 数据模型定义
├── project_manager.py     # 项目管理器主类
├── review_engine.py       # 评审引擎
└── prompts/
    ├── developer_mode.md   # 开发模式提示词
    └── reviewer_mode.md   # 评审模式提示词
```

## 错误处理要求
- 所有函数必须包含try-catch异常处理
- 必须记录详细的错误日志
- 必须提供用户友好的错误提示
- 必须实现错误恢复机制

## 文档要求
- 所有类和方法必须有docstring
- 必须包含类型注解
- 必须提供使用示例
- 必须包含性能说明

## 测试要求
- 必须包含单元测试
- 必须包含边界测试
- 必须包含异常测试
- 必须包含集成测试
- 测试覆盖率必须达到80%以上

## 评审标准
严格按照以下评分标准：
- 总分25分制
- 各检查项按权重分配分数
- Critical问题必须修复
- Major问题应该修复
- Minor问题建议改进

## 阶段转换条件
- 无Critical级别问题
- 总分达到通过阈值
- 迭代次数不超过限制
- 通过质量门禁检查

## 代码生成规则
当AI生成代码时，必须：
1. 先检查当前项目状态和阶段
2. 读取对应的提示词模板
3. 生成符合阶段要求的代码
4. 确保代码质量和规范性
5. 添加必要的测试用例
6. 更新项目状态文件

## 评审规则
当AI进行评审时，必须：
1. 读取当前阶段输出文件
2. 按照评审标准进行评估
3. 生成详细的评审报告
4. 提供具体的改进建议
5. 更新项目状态和评分

## 注意事项
- 严格遵循项目的双模式管理机制
- 确保状态文件的正确更新
- 保持代码的一致性和可维护性
- 优先考虑代码质量和规范性
- 及时处理Critical级别问题
